const { readFileSync, writeFileSync } = require("fs");
const { copySync } = require("fs-extra");
const { join: joinPath } = require("path");
var hbs = require("hbs");

const BUILD_DIR = "build";

/** ensures we get an env var or throws */
const ensureEnv = (name) => {
  const value = process.env[name];
  if (!value) {
    throw new Error(`Required env variable not found: ${name}`);
  }
  return value;
};

// ensure we have necessary env vars
const realmName = ensureEnv("TOZID_REALM_NAME");
const clientId = ensureEnv("TOZID_CLIENT_ID");
const hostName = ensureEnv("TOZID_HOSTNAME");
const role = ensureEnv("TOZID_ROLE_NAME");
console.log("found all necessary env variables");

// copy over public files
console.log("copying assets from public/");
copySync(
  joinPath(__dirname, "..", "public"),
  joinPath(__dirname, "..", BUILD_DIR)
);

// generate config override from env
console.log("overriding config with values from env");
const configContent = `
// autogenerated configuration. edit from env variables.
window.TOZID_REALM_NAME = "${realmName}";
window.TOZID_CLIENT_ID = "${clientId}";
window.TOZID_HOSTNAME = "${hostName}";
window.TOZID_ROLE_NAME = "${role}";
`;
writeFileSync(
  joinPath(__dirname, "..", "build", "javascripts", "config.js"),
  configContent
);

// compile hbs templates
/** takes filename relative to views/ & compiles the template */
const hbsTemplate = (filename) => {
  const templateContent = readFileSync(
    joinPath(__dirname, "..", "views", filename)
  ).toString();
  return hbs.handlebars.compile(templateContent);
};

console.log("compiling hbs template");
const layout = hbsTemplate("layout.hbs");
const index = hbsTemplate("index.hbs");
const title = "Tozny OpenId Connect Sample";
const html = layout({
  // template data goes here.
  body: index({ title }),
  title,
});
console.log("saving compiled html");
writeFileSync(joinPath(__dirname, "..", "build", "index.html"), html);

console.log(`build completed & output to ${BUILD_DIR}`);
